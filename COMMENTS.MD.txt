# COMMENTS.md

Este projeto implementa uma aplica√ß√£o full stack de gerenciamento de matr√≠culas de alunos utilizando:

- **Frontend**: Vue 3 + TypeScript + Vuetify 3 + Vite
- **Backend**: ASP.NET Core 8 com Entity Framework Core
- **Banco de dados**: PostgreSQL (pode ser substitu√≠do por MySQL ou banco InMemory para testes locais)

---

## ‚öôÔ∏è Decis√µes de Arquitetura

### Frontend

- **Framework**: Utiliza Vue 3 com script setup (Composition API) para simplicidade e reuso de l√≥gica.
- **UI**: Vuetify 3 com auto import ativado (via `vite-plugin-vuetify`).
- **Roteamento**: Vue Router com rotas nomeadas (`students`, `students/new`, `students/edit`).
- **Estado global**: Pinia com tipagem expl√≠cita, incluindo uso de `stubActions` para facilitar testes.
- **Comunica√ß√£o com a API**: `axios` centralizado no servi√ßo `studentService.ts`.
- **Componentiza√ß√£o**: Separado em `StudentList.vue`, `StudentForm.vue`, e l√≥gica extra√≠da em composables:
  - `useStudentList.ts` ‚Üí estado, a√ß√µes e intera√ß√£o com store/API
  - `useStudentForm.ts` ‚Üí formul√°rio, valida√ß√µes, salvar e feedback
- **Testes**: `Vitest` com cobertura de comportamento e renderiza√ß√£o, incluindo mocks de store e servi√ßos.

### Backend

- **Camadas**: `API`, `Application` e `Infrastructure`, com migra√ß√µes EF Core.
- **Modelos**: A entidade `Student` √© utilizada diretamente na API (sem DTOs ainda).
- **Valida√ß√£o**: Realizada via `ModelState` com Data Annotations.
- **CORS**: Habilitado via pol√≠tica global para permitir origens como `http://localhost:5173`.
- **Migrations**: Usadas migrations padr√£o do EF Core para cria√ß√£o de banco.

---

## üì¶ Bibliotecas Utilizadas

### Frontend

- `vue`, `vue-router`, `vite`, `typescript`
- `vuetify`, `vite-plugin-vuetify`
- `pinia`, `@pinia/testing`
- `axios`
- `vitest`, `@vue/test-utils`

### Backend

- `Microsoft.AspNetCore.Mvc`
- `Microsoft.EntityFrameworkCore`
- `Microsoft.EntityFrameworkCore.Design`
- `Microsoft.EntityFrameworkCore.Tools`

---

## üî¨ Testes e Cobertura

### Frontend:

- `vitest` com `@vue/test-utils` para montar componentes
- Cobertura calculada via `vitest --coverage`
- Testes validam renderiza√ß√£o, intera√ß√£o, exclus√£o e navega√ß√£o
- Router `push` mockado manualmente para testes com composables

### Backend:

- Estrutura pronta para uso com `xUnit` e `coverlet`
- Script para gerar relat√≥rio de cobertura via `reportgenerator`

Comando:

```bash
dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov
reportgenerator -reports:coverage/lcov.info -targetdir:coverage-report -reporttypes:Html
```

---

## üöÄ Melhorias Futuras (com tempo adicional)

- [ ] Implementar DTOs na camada `Application`
- [ ] Adicionar tratamento global de erros com middleware
- [ ] Melhorar design e responsividade do formul√°rio
- [ ] Substituir m√°scaras com lib dedicada

---

## ‚ùå Requisitos obrigat√≥rios n√£o entregues

Todos os requisitos obrigat√≥rios foram entregues com sucesso ‚úÖ

---

## üöÄ Resultado Final

A aplica√ß√£o entrega um CRUD completo de alunos com foco em boas pr√°ticas de arquitetura, separa√ß√£o de responsabilidades, integra√ß√£o funcional entre front e back e UX fluida com Vuetify. O c√≥digo segue padr√µes modernos de Vue 3 com Composition API e est√° preparado para manuten√ß√£o, testes e evolu√ß√£o.
